"use client";

import { usePerformanceMonitor } from "../hooks/usePerformanceMonitor";

interface PerformanceMetricsProps {
  technique: string;
  itemCount: number;
  visibleItems?: number;
}

// Generated by Copilot
export const PerformanceMetrics = ({
  technique,
  itemCount,
  visibleItems,
}: PerformanceMetricsProps) => {
  const { metrics } = usePerformanceMonitor();

  const getPerformanceColor = (technique: string) => {
    switch (technique) {
      case "no-optimization":
        return "border-red-200 bg-red-50";
      case "content-visibility":
        return "border-yellow-200 bg-yellow-50";
      case "windowing":
        return "border-green-200 bg-green-50";
      default:
        return "border-gray-200 bg-gray-50";
    }
  };

  const getPerformanceIcon = (technique: string) => {
    switch (technique) {
      case "no-optimization":
        return "‚ö†Ô∏è";
      case "content-visibility":
        return "‚ö°";
      case "windowing":
        return "üöÄ";
      default:
        return "üìä";
    }
  };

  return (
    <div className={`p-4 rounded-lg border ${getPerformanceColor(technique)}`}>
      <div className="flex items-center gap-2 mb-3">
        <span className="text-xl">{getPerformanceIcon(technique)}</span>
        <h3 className="font-semibold text-gray-900">
          {technique
            .split("-")
            .map((word) => word.charAt(0).toUpperCase() + word.slice(1))
            .join(" ")}
        </h3>
      </div>

      <div className="grid grid-cols-2 md:grid-cols-4 gap-3">
        <div className="text-center">
          <p className="text-xs text-gray-600 uppercase tracking-wide">Items</p>
          <p className="text-lg font-bold text-gray-900">
            {visibleItems
              ? `${visibleItems}/${itemCount}`
              : itemCount.toLocaleString()}
          </p>
        </div>

        <div className="text-center">
          <p className="text-xs text-gray-600 uppercase tracking-wide">FPS</p>
          <p
            className={`text-lg font-bold ${
              (metrics.fps || 0) >= 55
                ? "text-green-600"
                : (metrics.fps || 0) >= 30
                ? "text-yellow-600"
                : "text-red-600"
            }`}
          >
            {isNaN(metrics.fps) ? "0" : metrics.fps || "0"}
          </p>
        </div>

        <div className="text-center">
          <p className="text-xs text-gray-600 uppercase tracking-wide">
            DOM Nodes
          </p>
          <p className="text-lg font-bold text-gray-900">
            {isNaN(metrics.domNodes)
              ? "0"
              : (metrics.domNodes || 0).toLocaleString()}
          </p>
        </div>

        <div className="text-center">
          <p className="text-xs text-gray-600 uppercase tracking-wide">
            Memory (MB)
          </p>
          <p
            className={`text-lg font-bold ${
              (metrics.memoryUsage || 0) > 100
                ? "text-red-600"
                : (metrics.memoryUsage || 0) > 50
                ? "text-yellow-600"
                : "text-green-600"
            }`}
          >
            {isNaN(metrics.memoryUsage) || !metrics.memoryUsage
              ? "N/A"
              : metrics.memoryUsage}
          </p>
        </div>
      </div>

      {technique === "windowing" && visibleItems && (
        <div className="mt-3 p-2 bg-white rounded border">
          <p className="text-xs text-gray-600">
            <span className="font-medium">Optimization:</span> Only{" "}
            {visibleItems} items rendered out of {itemCount.toLocaleString()}{" "}
            total
            <span className="text-green-600 font-medium">
              {" "}
              (
              {itemCount > 0
                ? ((visibleItems / itemCount) * 100).toFixed(1)
                : "0"}
              % in DOM)
            </span>
          </p>
        </div>
      )}
    </div>
  );
};
