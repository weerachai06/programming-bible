"use client";

import { useState, useEffect, useRef, useCallback } from "react";
import { generateMockData } from "../helpers";
import { ListItem } from "../types";
import { PerformanceMetrics } from "./PerformanceMetrics";

const ITEM_HEIGHT = 120; // Fixed height for each item
const CONTAINER_HEIGHT = 384; // 96 * 4 (h-96 in Tailwind)
const OVERSCAN = 5; // Extra items to render outside visible area

// Generated by Copilot
export const WindowedList = () => {
  const [items] = useState<ListItem[]>(() => generateMockData(10000));
  const [scrollTop, setScrollTop] = useState(0);
  const containerRef = useRef<HTMLDivElement>(null);

  // Calculate visible range
  const startIndex = Math.max(
    0,
    Math.floor(scrollTop / ITEM_HEIGHT) - OVERSCAN
  );
  const endIndex = Math.min(
    items.length - 1,
    Math.floor((scrollTop + CONTAINER_HEIGHT) / ITEM_HEIGHT) + OVERSCAN
  );

  const visibleItems = items.slice(startIndex, endIndex + 1);
  const totalHeight = items.length * ITEM_HEIGHT;
  const offsetY = startIndex * ITEM_HEIGHT;

  const handleScroll = useCallback((e: React.UIEvent<HTMLDivElement>) => {
    setScrollTop(e.currentTarget.scrollTop);
  }, []);

  useEffect(() => {
    // Component loaded successfully
  }, []);

  return (
    <div className="p-4">
      <PerformanceMetrics
        technique="windowing"
        itemCount={items.length}
        visibleItems={visibleItems.length}
      />

      <div
        ref={containerRef}
        className="h-96 overflow-y-auto border border-gray-300 rounded-lg mt-4"
        onScroll={handleScroll}
      >
        <div style={{ height: totalHeight, position: "relative" }}>
          <div
            style={{
              transform: `translateY(${offsetY}px)`,
              position: "absolute",
              top: 0,
              left: 0,
              right: 0,
            }}
          >
            <div className="p-4">
              {visibleItems.map((item) => (
                <div
                  key={item.id}
                  className="flex items-center justify-between p-4 mb-2 bg-gray-50 border border-gray-200 rounded-lg hover:bg-gray-100 transition-colors"
                  style={{ height: ITEM_HEIGHT - 8 }} // Account for margin
                >
                  <div className="flex-1">
                    <h4 className="font-semibold text-gray-900">{item.name}</h4>
                    <p className="text-sm text-gray-600 mt-1">
                      {item.description}
                    </p>
                    <div className="flex gap-2 mt-2">
                      <span className="px-2 py-1 bg-blue-100 text-blue-800 text-xs rounded-full">
                        {item.category}
                      </span>
                      <span
                        className={`px-2 py-1 text-xs rounded-full ${
                          item.status === "Active"
                            ? "bg-green-100 text-green-800"
                            : item.status === "Inactive"
                            ? "bg-red-100 text-red-800"
                            : "bg-yellow-100 text-yellow-800"
                        }`}
                      >
                        {item.status}
                      </span>
                    </div>
                  </div>
                  <div className="text-right">
                    <p className="text-sm text-gray-500">{item.date}</p>
                    <p className="text-xs text-gray-400">ID: {item.id}</p>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>

      <div className="mt-4 p-3 bg-gray-50 rounded-lg">
        <div className="grid grid-cols-2 gap-4 text-sm">
          <div>
            <p className="text-gray-600">
              <strong>Visible Range:</strong> {startIndex + 1} - {endIndex + 1}
            </p>
            <p className="text-gray-600">
              <strong>Rendered Items:</strong> {visibleItems.length} /{" "}
              {items.length}
            </p>
          </div>
          <div>
            <p className="text-gray-600">
              <strong>Scroll Position:</strong> {Math.round(scrollTop)}px
            </p>
            <p className="text-gray-600">
              <strong>Performance:</strong> Only visible items in DOM
            </p>
          </div>
        </div>
      </div>
    </div>
  );
};
